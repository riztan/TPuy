/*
 * Proyecto TPuy
 *
 * poslogin.xbs: Formulario para definir entorno luego de hacer login.
 *
 */
#include "tpy_xbs.ch"
#define GtkTreeIter  Array( 4 )

Function PosLogin()
  Local oWnd, oScroll, oIconView, oModel
  Local oForm

  if !oTpuy:IsDef("oUser") .AND. !IsObject(oTpuy:oUser) ; return nil ; endif

  if !oTpuy:RunXBS("netio_check") ; return .f. ; endif

  SET PUBLIC oForm

  ::aApps := ~oServer:GetApplications()
  
//View( ::aApps )

//  SET RESOURCES ::cRes FROM FILE oTpuy:cResources+"tpy_example1.ui"

  if hb_IsObject(oTpuy:oFondo)
     oTpuy:oFondo:End()
     DEFINE BOX oTpuy:oFondo VERTICAL CONTAINER BORDER 3 OF oTpuy:oDesktop
  endif

  //DEFINE LABEL ::oLabApp TEXT "<i> Aplicaciones </i>" MARKUP
  DEFINE LABEL ::oLabApp TEXT " <span font_desc='Sans Italic 8'><i>Aplicaciones</i></span> " MARKUP
  DEFINE FRAME ::oGrpApp OF oTpuy:oFondo CONTAINER SHADOW 1
         ::oGrpApp:SetLabel( ::oLabApp )

  DEFINE SCROLLEDWINDOW ::oScroll CONTAINER OF ::oGrpApp
     ::oScroll:SetPolicy( GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC )
     ::oScroll:SetBorder(3)

  ::oModel := __Create_Model( oForm )
  DEFINE ICONVIEW ::oIconView MODEL ::oModel OF ::oScroll CONTAINER 

  ::oIconView:SetTexColumn( 1 )
  ::oIconView:SetPixBufColumn( 2 )
  ::oIconView:SetToolTipColumn( 3 )
  ::oIconView:SetColumns( 6 )
  ::oIconView:SetItemWidth( 115 )
  //::oIconView:bItem_Activated := {|oSender,pPath| Comprueba( oSender, pPath )  }
  ::oIconView:bItem_Activated := {|oSender,pPath| __Prueba( oSender, pPath, oForm )  }

//View( ::oIconview )

  ::oIconView:SetFocus()

return NIL


STATIC FUNCTION __Create_Model( oForm )
  local aIter := GtkTreeIter
  local oLbx, x, oImage,pixbuf
  Local aFiles := {}, aApp

  /* Creamos Arreglo con Datos para el Modelo */
  FOR EACH aApp IN ::aApps
     if !FILE( oTpuy:cImages+aApp[3]+"_"+aApp[4]+".png" )
        AADD( aFiles, {"logo_gnome_128x128.png", aApp[5], aApp[6]  } )
     else
        AADD( aFiles, {aApp[3]+"_"+aApp[4]+".png", aApp[5], aApp[6] } )
     endif
  NEXT


  DEFINE LIST_STORE oLbx TYPES G_TYPE_STRING, GDK_TYPE_PIXBUF, G_TYPE_STRING
    For x := 1 To Len( aFiles )
        APPEND LIST_STORE oLbx ITER aIter
        SET LIST_STORE oLbx ITER aIter POS 1 VALUE aFiles[x,2]

        DEFINE IMAGE oImage FILE oTpuy:cImages+aFiles[x,1] LOAD
               oImage:Adjust(64)

        SET LIST_STORE oLbx ITER aIter POS 2 VALUE oImage:GetPixBuf()
        gdk_pixbuf_unref( pixbuf )

        SET LIST_STORE oLbx ITER aIter POS 3 VALUE aFiles[x,3]
    Next

RETURN oLbx


STATIC FUNCTION __prueba( oIconView, pPath, oForm )

   Local cText

   cText  := ::oIconView:GetValue( 3,, pPath )

   if hb_IsObject(oTpuy:oFondo)
//      oTpuy:oFondo:End()
//      DEFINE BOX oTpuy:oFondo CONTAINER BORDER 3 OF oTpuy:oDesktop
   endif
   if hb_IsObject( ::oBoxTest )
      ::oBoxTest:End()
   endif

   DEFINE BOX ::oBoxTest VERTICAL CONTAINER BORDER 3 OF oTpuy:oFondo

   DEFINE IMAGE ::ImgCerrar FILE oTpuy:cImages+"cerrar.png" 
                ::ImgCerrar:Adjust(12)

   cText  := " <span font_desc='Sans Italic 8'><i>"+cText+"</i></span> "

   DEFINE BOX ::oBoxLabel CONTAINER

      DEFINE BUTTON ::oBtn CONTAINER ACTION oTpuy:RunXBS("poslogin") ;
             TOOLTIP "Cerrar";
             OF ::oBoxLabel
             ::oBtn:SetImage( ::ImgCerrar )

      DEFINE LABEL ::oLabel TEXT cText MARKUP OF ::oBoxLabel

   DEFINE FRAME ::oGrp LABEL ::oBoxLabel OF ::oBoxTest CONTAINER SHADOW 1

//View( ::oGrp )
   
Return nil

// Una manera facil de obtener el valor de las columnas
// Podemos ver como coger la imagen de la columna 1
Function Comprueba( oIconView, pPath  )
    Local oWnd , oImage, cText
    Local nWidth,nHeight
    Local cWidth,cHeight
    Local nWMax:=600, nHMax:=600
    
    // u := o:GetValue( nColumn, cType_data, pPath )
    cText  := oIconView:GetValue( 1,, pPath )
    
    DEFINE WINDOW oWnd TITLE cText TYPE_HINT GDK_WINDOW_TYPE_HINT_MENU
         DEFINE IMAGE oImage FILE oTpuy:cImages+cText OF oWnd CONTAINER
         
         nWidth  := oImage:GetWidth()
         nHeight := oImage:GetHeight()
         
         cWidth  := AllTrim( Str(nWidth) )
         cHeight := AllTrim( Str(nHeight) )
         
         if nWidth > nWMax ; nWidth := nWMax ; endif
         if nHeight > nHMax ; nHeight := nHMax ; endif
         
         oImage:Adjust( nWidth ) //, nHeight )
         
         oWnd:SetTitle( cText+". "+cHeight+"x"+cWidth )
    
    ACTIVATE WINDOW oWnd MODAL CENTER

Return nil
