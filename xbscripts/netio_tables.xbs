
#include "gclass.ch"
#include "xhb.ch"
#include "tpy_netio.ch"
#include "tepuy.ch"

#xtranslate ::<exp> =>  oForm:<exp> 

function netio_Tables()

   Local lConnect:=.f.
   Local oForm 

   DEFINE PUBLIC oForm

   oTpuy:RunXBS("netio_check")


   ::cSchema := "tpuy"

   ::cQry := "select " + ~oServer:GetSColumns( "base_tables" ) + " "
   ::cQry += ",app_name "

/*
   ::cQry := "select " 
   ::cQry += "app_name, "
   ::cQry += "tab_id, "
//   ::cQry += "tab_schema, "
   ::cQry += "tab_name, "
   ::cQry += "tab_short_descri, "
   ::cQry += "tab_description "
*/
   ::cQry += "from " + ::cSchema + ".v_base_tables "
   ::cQry += "order by tab_name "

   DEFINE MODEL_QUERY ::oMQuery REMOTE ;
          QUERY ::cQry                 ;
          SCHEMA ::cSchema
          
   if ::oMQuery = NIL 
      MsgStop("problemas")
      ::End()
      return nil
   endif


   if Empty( ::oMQuery:aData )
      if MsgYesNo("¿Desea ingresar información? ","No hay Datos")
         oTpuy:RunXBS( "netio_table", ::oMQuery, "add" )
         ::oMQuery:Refresh()

      else
         oTpuy:oScript:netio_tables:End()
         return nil
      endif
   endif


   DEFINE LISTBOX ::oListbox ;
          MODEL ::oMQuery    ;
          TITLE "Tablas"     ;
          SIZE  600,300      

          ACTION OF ::oListBox BUTTON NEW tables_Editar( oForm, .t. )

//          ACTION OF ::oListBox BUTTON EDIT tables_Editar( oForm )

          ACTION OF ::oListBox BUTTON EDIT ;
                    oTpuy:RunXBS("netio_columns",::oListBox,;
                                 ::oListBox:GetValue("tab_name"))

          ACTION OF ::oListBox BUTTON DEL (::oMQuery:Delete(), ::oMQuery:Refresh())

          ACTION OF ::oListBox BUTTON PRINT MsgInfo("por desarrollar...")

   ACTIVATE LISTBOX ::oListBox


   //::oMQuery:Refresh()
      
/*
   ACTIVATE WINDOW oTpuy:oWindow CENTER ;
            VALID (oTpuy:oScript:netio_tables:End(), .t. )
*/

return .t.




/* Edición de Datos en Formulario tipo ABM */
FUNCTION tables_Editar( oForm, lAdd )

   local aTables := {}

   ::oABM := Tpy_ABM2():New( ::oListBox, ::oListBox, "Edición de Tabla.", ,,,,,,,lAdd )

   if !IsObject( ::oABM ) 
      return .f.
   endif

   ::oABM:lButton := .t.
   ::oABM:lBarBtn := .f.

   ::oEntry_schema := ::oABM:hWidget["tab_schema"]

   ::oEntry_schema:SetAction({|| oTpuy:RunXBS("lbx_esquemas", ::oABM) })
   ::oEntry_schema:Set_Property("activates-default",.t.)

   ::oEntry_schema:bValid := {|oEntry| ValSchema(oEntry, ::oABM ) }


   ::oEntry_app := ::oABM:hWidget["tab_app_id"]
   ::oEntry_app:SetAction({|| oTpuy:RunXBS("lbx_applications", ::oABM) })
   ::oEntry_app:Set_Property("activates-default",.t.)

   ::oABM:Active()

RETURN .t.



FUNCTION ValSchema(oEntry, oABM)
   Local lResult := .f.
   Local cValue

   cValue := oEntry:GetText()

   if oABM:hPreValues["tab_schema"] == cValue
      return .t.
   endif

//   ? oEntry:ClassName(), hb_IsBlock( oEntry:bAction )
   if Empty( oEntry:GetText() ) .and. hb_IsBlock( oEntry:bAction )
//      ? "script ", valtype(oEntry:bAction)
      lResult := Eval( oEntry:bAction, oABM )
   endif

   if !lResult
      oABM:hPreValues["tab_schema"] := cValue
   endif

RETURN lResult


//eof




/* funcion de pruebas... 
   no la borro por si me sirve de algo mas adelante. 
*/
function prueba( oForm )
   Local nColumn := ::oListBox:oModel:tab_description:oGtkColumn:nColumn

   //View( ::oListBox:GetValue("tab_description") )

   //-- De esta forma podemos sustituir controles en la ventana
//   ::oListBox:oBox:End()

   IF ISObject(::oBOX_ABM) ; ::oBOX_ABM:End() ; EndIf
   DEFINE BOX ::oBOX_ABM OF ::oListBox:oBox

//   DEFINE BOX ::oListBox:oBox VERTICAL OF ::oListBox:oWnd
//   DEFINE TOOLBAR ::oListBox:oBarButton OF ::oListBox:oBox

   ::oListBox:oWnd:SetTitle("Nuevo Título")

   //::oABM := Tpy_ABM2():New( ::oListBox:oBox, ::oMQuery, "titulo", ,,,,,, )
   ::oABM := Tpy_ABM2():New( ::oBOX_ABM, ::oListBox, "titulo", ,,,,,, )
//   ::oABM:lImage := .f.
   ::oABM:Active()

/*
   ::oABM := Tpy_ABM2():New( ::oListBox:oBox , ::oMQuery, "titulo", ,,,,,, )
   ::oABM:lImage := .f.

   ::oABM:Active()
*/

/*   
   DEFINE WINDOW ::oABM TITLE "ABM" ;
          SIZE 300, 200             ;
          OF ::oListBox:oWnd

   ACTIVATE WINDOW ::oABM
*/
return .t.
