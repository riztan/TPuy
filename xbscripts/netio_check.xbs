/*
 * Proyecto Tpuy
 *
 * netio_check: Verifica conexion al servidor de NetIO
 */

#include "tpy_xbs.ch"

FUNCTION netio_check()

  local lConnect := .f.
  local oMsgRun

  if !oTpuy:lNetIO 

     try
        oMsgRun := MsgRunStart("Conectando al Servidor NetIO...")
        lConnect := netio_connect( NETSERVER, NETPORT,, NETPASSWD )
        if lConnect
           if !oTpuy:Isdef( "oUser" )
              __Login() //oTpuy:RunXBS("netio_login",.f.)
           endif
        endif
        oMsgRun:End()
     catch
        MsgStop( "No se puede conectar con "+NETSERVER )
        oMsgRun:End()
        Return .F.
     end

     If !lConnect
        MsgAlert("No logro conectar con "+NETSERVER)
        Return lConnect
     EndIf

     oTpuy:lNetIO := .t.
     Check_Version()
     oTpuy:tLastNetIO := hb_DateTime()

  endif

  if (hb_DateTime() - oTpuy:tLastNetIO) >= 0.001000 
     if netio_GetConnection( NETSERVER, NETPORT,, NETPASSWD ) = NIL
        oTpuy:lNetIO := .f.
     else
        if !oTpuy:IsDef("oUser")
           __Login() //oTpuy:RunXBS("netio_login",.f.)
        endif
     endif
  endif

RETURN .T.



Procedure __Login()

   local cScriptName := "netio_login", cScriptFile
   local aScripts, aScript, cMD5, cSource 

   __FilesCheck("INC")
   __FilesCheck("RES")
   __FilesCheck("IMG")

   aScripts := ~GetScripts()

   FOR EACH aScript IN aScripts
      cScriptFile := oTpuy:cXBScripts+aScript[1]+".xbs"
      cMD5 := hb_MD5File( cScriptFile )
      if !File( cScriptFile ) .or. !(aScript[2] == cMD5)
         cSource := ~GetScripts( aScript[1] )
         hb_MemoWrit( cScriptFile, cSource )
      endif
   NEXT

   cScriptFile := oTpuy:cXBScripts+cScriptName+".xbs" 

   If File(cScriptFile)
      oTpuy:RunXBS(cScriptName,.f.)
   Else
      MsgStop("No se puede ejecutar script de login.")
   EndIf

return


/* Realiza verificaci√≥n de ficheros base */
Procedure __FilesCheck(cType)
   local aRFiles, aLFiles, cDir
   local aFile, cLFile_MD5

   if cType = "INC"
      aRFiles := ~IncList()
      cDir := oTpuy:cIncludes
      bGet := {|| ~IncGet(aFile[1]) }
   elseif cType = "RES"
      aRFiles := ~ResourceList()
      cDir := oTpuy:cResources
      bGet := {|| ~ResourceGet(aFile[1]) }
   elseif cType = "IMG"
      aRFiles := ~ImageList()
      cDir := oTpuy:cImages
      bGet := {|| ~ImageGet(aFile[1]) }
   else
      return nil
   endif

   FOR EACH aFile IN aRFiles
      cLFile_MD5 := hb_MD5File( cDir+aFile[1] )
      if cLFile_MD5 != aFile[2]
         //MsgInfo( cDir+aFile[1] )
         hb_MemoWrit( cDir+aFile[1], Eval(bGet) )
      endif
   NEXT
   
return

//eof
