<?xml version="1.0" encoding="UTF-8"?>
<!--

 Authors: Marco Barisione, Emanuele Aina
 Copyright (C) 2005-2007 Marco Barisione <barisione@gmail.com>
 Copyright (C) 2005-2007 Emanuele Aina

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->
<language id="xharbour" _name="xharbour" version="2.0" _section="Sources">
    <metadata>
      <property name="mimetypes">text/x-prg</property>
      <property name="globs">*.prg</property>
      <property name="line-comment-start">//</property>
      <property name="block-comment-start">/*</property>
      <property name="block-comment-end">*/</property>
    </metadata>

    <styles>
        <style id="comment"           _name="Comment"             map-to="def:comment"/>
        <style id="error"             _name="Error"               map-to="def:error"/>
        <style id="string"            _name="String"              map-to="def:string"/>
        <style id="preprocessor"      _name="Preprocessor"        map-to="def:preprocessor"/>
        <style id="common-defines"    _name="Common Defines"      map-to="def:special-constant"/>
        <style id="included-file"     _name="Included File"       map-to="def:string"/>
        <style id="char"              _name="Character"           map-to="def:character"/>
        <style id="keyword"           _name="Keyword"             map-to="def:keyword"/>
        <style id="type"              _name="Data Type"           map-to="def:type"/>
        <style id="storage-class"     _name="Storage Class"       map-to="def:type"/>
        <style id="printf"            _name="printf Conversion"   map-to="def:character"/>
        <style id="escaped-character" _name="Escaped Character"   map-to="def:special-char"/>
        <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
        <style id="decimal"           _name="Decimal number"      map-to="def:decimal"/>
        <style id="octal"             _name="Octal number"        map-to="def:base-n-integer"/>
        <style id="hexadecimal"       _name="Hexadecimal number"  map-to="def:base-n-integer"/>
        <style id="boolean"           _name="Boolean value"       map-to="def:boolean"/>
	<style id="xhb-classes"       _name="xHarbour Classes"    map-to="xharbour:classes"/>
    </styles>

    <definitions>
        <!-- TODO: what about scanf ? -->
        <!-- man 3 printf -->
        <context id="printf" style-ref="printf" extend-parent="false">
            <match extended="true">
                \%\%|\%
                (?:[1-9][0-9]*\$)?      # argument
                [#0\-\ \+\'I]*          # flags
                (?:[1-9][0-9]*|\*)?     # width
                (?:\.\-?(?:[0-9]+|\*))? # precision
                (?:hh|ll|[hlLqjzt])?    # length modifier
                [diouxXeEfFgGaAcsCSpnm] # conversion specifier
            </match>
        </context>

        <define-regex id="escaped-character" extended="true">
            \\(                   # leading backslash
            [\\\"\'nrbtfav\?] |   # escaped character
            [0-7]{1,3} |          # one, two, or three octal digits
            x[0-9A-Fa-f]+         # 'x' followed by hex digits
            )
        </define-regex>

        <context id="xharbour">
            <include>

                <!-- gtk-doc -->
                <context ref="gtk-doc:inline-docs-section"/>

                <!-- Comments -->
                <context id="comment" style-ref="comment" end-at-line-end="true">
                    <start>//</start>
                    <include>
                      <context ref="def:in-line-comment"/>
                    </include>
                </context>

                <context id="comment-multiline" style-ref="comment">
                    <start>/\*</start>
                    <end>\*/</end>
                    <include>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <context id="close-comment-outside-comment" style-ref="error">
                    <match>\*/(?!\*)</match>
                </context>

                <!-- Preprocessor -->
                <define-regex id="preproc-start">^\s*#\s*</define-regex>

                <context id="if0-comment" style-ref="comment">
                    <start>\%{preproc-start}if\b\s*0\b</start>
                    <end>\%{preproc-start}(endif|else|elif)\b</end>
                    <include>
                        <context id="if-in-if0">
                            <start>\%{preproc-start}if(n?def)?\b</start>
                            <end>\%{preproc-start}endif\b</end>
                            <include>
                                <context ref="if-in-if0"/>
                                <context ref="def:in-comment"/>
                            </include>
                        </context>
                        <context ref="def:in-comment"/>
                    </include>
                </context>

                <context id="include" style-ref="preprocessor">
                    <match extended="true">
                            \%{preproc-start}
                            (include|import)\s*
                            (".*?"|&lt;.*&gt;)
                    </match>
                    <include>
                        <context id="included-file" sub-pattern="2" style-ref="included-file"/>
                    </include>
                </context>

                <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
                    <start extended="true">
                            \%{preproc-start}
                            (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
                            \b
                    </start>
                    <include>
                        <context ref="def:line-continue" ignore-style="true"/>
                        <context ref="string" ignore-style="true"/>
                        <context ref="comment"/>
                        <context ref="comment-multiline"/>
                    </include>
                </context>

                <context id="string" style-ref="string" end-at-line-end="true">
                    <start>L?"</start>
                    <end>"</end>
                    <include>
                        <context ref="printf"/>
                        <context id="escaped-character" style-ref="escaped-character">
                            <match>\%{escaped-character}</match>
                        </context>
                        <context ref="def:line-continue"/>
                    </include>
                </context>

                <context id="char" style-ref="char">
                    <match>L?'(\%{escaped-character}|.)'</match>
                </context>

                <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
                <context id="float" style-ref="floating-point">
                    <match extended="true">
                        (?&lt;![\w\.])
                        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
                         ([0-9]+[Ee][+-]?[0-9]*))
                        [fFlL]?
                        (?![\w\.])
                    </match>
                </context>

                <context id="hexadecimal" style-ref="hexadecimal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        0[xX][a-fA-F0-9]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <context id="octal" style-ref="octal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        0[0-7]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <context id="decimal" style-ref="decimal">
                    <match extended="true">
                        (?&lt;![\w\.])
                        [0-9]+[uUlL]*
                        (?![\w\.])
                    </match>
                </context>

                <!-- Keywords -->
                <context id="keywords" style-ref="keyword">
                    <keyword>asm</keyword>
                    <keyword>(break|Break|BREAK)</keyword>
                    <keyword>(case|Case|CASE)</keyword>
                    <keyword>(continue|Continue|CONTINUE)</keyword>
                    <keyword>(default|Default|DEFAULT)</keyword>
		    <keyword>(local|Local|LOCAL)</keyword>
                    <keyword>(do|Do|DO)</keyword>
                    <keyword>(else|Else|ELSE)</keyword>
                    <keyword>enum</keyword>
                    <keyword>(for|For|FOR)</keyword>
                    <keyword>fortran</keyword>
                    <keyword>goto</keyword>
                    <keyword>(if|If|IF)</keyword>
		    <keyword>(endif|EndIf|ENDIF)</keyword>
                    <keyword>sizeof</keyword>
                    <keyword>struct</keyword>
                    <keyword>(switch|Switch|SWITCH)</keyword>
		    <keyword>(other|Other|OTHER)</keyword>
		    <keyword>(do case|Do Case|DO CASE)</keyword>  
		    <keyword>(end case|End Case|END CASE)</keyword>  
                    <keyword>typedef</keyword>
                    <keyword>union</keyword>
                    <keyword>while</keyword>
	    	</context>
	    
		<context id="xhb-classes" style-ref="xhb-classes">
		    <keyword>(function|Function|FUNCTION)</keyword>  
		    <keyword>(func |Func |FUNC )</keyword>  
		    <keyword>(procedure|Procedure|PROCEDURE)</keyword>  
		    <keyword>(return|Return|RETURN)</keyword>
		    <keyword>(class|Class|CLASS|from|From|FROM|method|Method|METHOD)</keyword>  
		    <keyword>(endclass|EndClass|ENDCLASS)</keyword>  
		    <keyword>(init|Init|INIT)</keyword>  
		    <keyword>(new|New|NEW|inline|Inline|INLINE)</keyword>  
		    <keyword>(classdata|ClassData|CLASSDATA|data|Data|DATA)</keyword>  
		    <keyword>(self|Self|SELF|super|Super|SUPER)</keyword>  
		    <keyword>(virtual|Virtual|VIRTUAL)</keyword>  
                </context>
		
				
		<context id="tgtk:functions" style-ref="tgtk:functions">
			<keyword>gtk_window_set_title</keyword>  
		</context>

		<context id="tgtk:gclass" style-ref="tgtk:gclass">
			<keyword>gtk_window_set_title</keyword>  
			<keyword>(DEFINE WINDOW |TITLE|TYPE|TYPE_HINT|SIZE|ID|RESOURCE)</keyword>
			<keyword>(ACTIVATE WINDOW |CENTER|VALID|MAXIMIZED|MODAL|INITIATE)</keyword>
			<keyword>(DEFINE DIALOG|BUTTON|ACTION)</keyword>
			<keyword>(ACTIVATE DIALOG|NOSEPARATOR|RUN|RESIZABLE)</keyword>
			<keyword>(ON_YES|ON_NO|ON_OK|ON_CANCEL|ON_CLOSE|ON_APPLY|ON_HELP)</keyword>
			<keyword>(ON YES|ON NO|ON OK|ON CANCEL|ON CLOSE|ON APPLY|ON HELP)</keyword>
			<keyword>(DEFINE TIMER|INTERVAL)</keyword>
			<keyword>(ACTIVATE TIMER|INTERVAL)</keyword>
			<keyword>DEFINE BARMENU</keyword>
			<keyword>DEFINE MENUBAR</keyword>
			<keyword>ACTIVATE MENUBAR</keyword>
			<keyword>SUBMENU|OF</keyword>
			<keyword>( FROM STOCK )</keyword>
			<keyword>MENU SEPARATOR|OF</keyword>
			<keyword>MENU TEAROFF|OF</keyword>
			<keyword>DEFINE MENU</keyword>
			<keyword>MENUITEM|ROOT|MNEMONIC</keyword>
			<keyword>MENUITEM IMAGE</keyword>
			<keyword>DEFINE MENUITEM|IMAGE</keyword>
			<keyword>DEFINE MENUITEM CHECK|ASRADIO|ACTIVE</keyword>
			<keyword>DEFINE MENUITEM IMAGE</keyword>
			<keyword>DEFINE IMAGE|FILE |SIZE_ICON |EXPAND|FILL|PADDING |CONTAINER|OF </keyword>
			<keyword>POS |LABELNOTEBOOK |SIZE | INSERT_END| SECOND_PANED| SHRINK</keyword>
			<keyword>TABLEATTACH |HALIGN |VALIGN | LOAD</keyword>
			<keyword>DEFINE BOX | HOMOGENEOUS| HOMO|SPACING | VERTICAL</keyword>
			<keyword>DEFINE LABEL | LABEL| PROMPT| MARKUP|JUSTIFY </keyword>
			<keyword>DEFINE EXPANDER | TEXT| OPEN| MARKUP|JUSTIFY </keyword>
			<keyword>(DEFINE BUTTON | TEXT | LABEL | PROMPT | ACTION | VALID )</keyword>
			<keyword>(FROM STOCK |PADDING|OF|POS|ID|RESOURCE|CURSOR)</keyword>
			<keyword>(LABELNOTEBOOK|SIZE|BAR|MSG|TABLEATTACH|STYLE|STYLE_CHILD)</keyword>
		</context>
		
		<context id="gtk:constants" style-ref="gtk:constants">
			<keyword> gdk_spider| GDK_SPIDER</keyword>  
		</context>
		
		<context id="xhb-constants" style-ref="xharbour:constants">
			<match extended="true">
			   (\.[tTfF]\.|\.and\.|\.AND\.|\.or\.|\.OR\.)
			</match>
		</context>
		
                <context id="types" style-ref="type">
                    <keyword>_Bool</keyword>
                    <keyword>_Complex</keyword>
                    <keyword>_Imaginary</keyword>
                    <keyword>bool</keyword>
                    <keyword>char</keyword>
                    <keyword>double</keyword>
                    <keyword>float</keyword>
                    <keyword>int</keyword>
                    <keyword>long</keyword>
                    <keyword>short</keyword>
                    <keyword>signed</keyword>
                    <keyword>size_t</keyword>
                    <keyword>unsigned</keyword>
                    <keyword>void</keyword>
                    
                </context>

                <context id="storage-class" style-ref="storage-class">
                    <keyword>auto</keyword>
                    <keyword>const</keyword>
                    <keyword>extern</keyword>
                    <keyword>inline</keyword>
                    <keyword>register</keyword>
                    <keyword>restrict</keyword>
                    <keyword>volatile</keyword>
		    <keyword>(static |Static |STATIC )</keyword>
                </context>

                <context id="common-defines" style-ref="common-defines">
                    <keyword>NULL</keyword>
		    <keyword>NIL</keyword>
                    <keyword>MAX</keyword>
                    <keyword>MIN</keyword>
                    <keyword>TRUE</keyword>
                    <keyword>FALSE</keyword>
                    <keyword>__LINE__</keyword>
                    <keyword>__DATA__</keyword>
                    <keyword>__FILE__</keyword>
                    <keyword>__func__</keyword>
                    <keyword>__TIME__</keyword>
                    <keyword>__STDC__</keyword>
                </context>

                <!-- C99 booleans -->
                <context id="boolean" style-ref="boolean">
                    <keyword>true</keyword>
                    <keyword>false</keyword>
                </context>

            </include>
        </context>
    </definitions>
</language>
